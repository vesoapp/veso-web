"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../lib/constants");
function isBlockedPage(pathname) {
    return constants_1.BLOCKED_PAGES.indexOf(pathname) !== -1;
}
exports.isBlockedPage = isBlockedPage;
function cleanAmpPath(pathname) {
    if (pathname.match(/\?amp=(y|yes|true|1)/)) {
        pathname = pathname.replace(/\?amp=(y|yes|true|1)&?/, '?');
    }
    if (pathname.match(/&amp=(y|yes|true|1)/)) {
        pathname = pathname.replace(/&amp=(y|yes|true|1)/, '');
    }
    pathname = pathname.replace(/\?$/, '');
    return pathname;
}
exports.cleanAmpPath = cleanAmpPath;
function collectEnv(page, env, pageEnv) {
    const missingEnvKeys = new Set();
    const collected = pageEnv
        ? pageEnv.reduce((prev, key) => {
            if (typeof env[key] !== 'undefined') {
                prev[key] = env[key];
            }
            else {
                missingEnvKeys.add(key);
            }
            return prev;
        }, {})
        : {};
    if (missingEnvKeys.size > 0) {
        console.warn(`Missing env value${missingEnvKeys.size === 1 ? '' : 's'}: ${[
            ...missingEnvKeys,
        ].join(', ')} for ${page}.\n` +
            `Make sure to supply this value in either your .env file or in your environment.\n` +
            `See here for more info: https://err.sh/next.js/missing-env-value`);
    }
    return collected;
}
exports.collectEnv = collectEnv;
