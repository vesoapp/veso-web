import * as React from 'react';
import { Store, AnyAction, Action } from 'redux';
import { NextPageContext } from 'next';
import { AppProps } from 'next/app';
declare const _default: (makeStore: MakeStore, config?: Config | undefined) => (App: any) => {
    new (props: WrappedAppProps, context: import("next/dist/next-server/lib/utils").AppContextType<import("next/dist/client/router").Router>): {
        store: Store<any, AnyAction>;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<WrappedAppProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<WrappedAppProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<WrappedAppProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<WrappedAppProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<WrappedAppProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<WrappedAppProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<WrappedAppProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<WrappedAppProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<WrappedAppProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    getInitialProps: (appCtx: import("next/dist/next-server/lib/utils").AppContextType<import("next/dist/client/router").Router>) => Promise<{
        isServer: boolean;
        initialState: any;
        initialProps: {};
    }>;
    contextType?: React.Context<any> | undefined;
};
export default _default;
export interface Config {
    serializeState?: (state: any) => any;
    deserializeState?: (state: any) => any;
    storeKey?: string;
    debug?: boolean;
    overrideIsServer?: boolean;
}
export declare type MakeStoreOptions = Config & NextPageContext;
export declare type MakeStore = (initialState: any, options: MakeStoreOptions) => Store;
export interface InitStoreOptions {
    initialState?: any;
    ctx: NextPageContext;
}
export interface WrappedAppProps {
    initialProps: any;
    initialState: any;
    isServer: boolean;
}
/**
 * Convenience type that adds the Redux store provided by `next-redux-wrapper` to the props of a
 * wrapped `App` component.
 *
 * Usage example (within `_app.js`):
 * ```
 * class MyApp extends App<ReduxWrappedAppProps> {
 * ```
 * or, if you want to provide custom state and action types for the store:
 * ```
 * class MyApp extends App<ReduxWrappedAppProps<MyStateType, MyActionType>> {
 * ```
 *
 * You can also add custom `App` props via the third type argument.
 */
export interface ReduxWrapperAppProps<S = any, A extends Action = AnyAction, P = {}> extends AppProps<P> {
    store: Store<S, A>;
}
declare module 'next/dist/next-server/lib/utils' {
    interface NextPageContext<S = any, A extends Action = AnyAction> {
        /**
         * Provided by next-redux-wrapper: Whether the code is executed on the server or the client side
         */
        isServer: boolean;
        /**
         * Provided by next-redux-wrapper: The redux store
         */
        store: Store<S, A>;
    }
}
